{"version":3,"sources":["state/user/actions.ts","hooks/useTheme.ts","state/user/hooks/index.ts","layouts/MainLayout/Footer.tsx","context/OnboardContext.tsx","config/constants/blocknative.tsx","layouts/MainLayout/Header.tsx","layouts/MainLayout/index.tsx","assets/img/ephochs.png","views/Home/Epochs.tsx","views/Home/FutureWork.tsx","views/Home/index.tsx","views/index.tsx","App.tsx","state/global/actions.ts","state/user/reducer.ts","state/index.ts","Providers.tsx","reportWebVitals.ts","index.tsx"],"names":["toggleTheme","createAction","useTheme","dispatch","useDispatch","isDark","useSelector","state","user","useCallback","toggleThemeAction","useThemeManager","Footer","className","classNames","OnboardContext","createContext","useOnboardContext","useContext","walletChecks","checkName","OnboardProvider","props","onboard","address","balance","network","wallet","appNetworkId","setup","a","walletSelect","walletCheck","walletState","getState","setState","console","log","setConfig","config","initialisation","dappId","process","networkId","heading","subscriptions","Onboard","Provider","value","this","children","Component","Header","handleConnectWallet","darkMode","to","onClick","MainLayout","classnames","Ephochs","src","imgEphochs","alt","FutureWork","Home","Pages","exact","path","component","App","Helmet","dark","Views","updateVersion","initialState","timestamp","Date","getTime","createReducer","builder","addCase","PERSISTED_KEYS","store","configureStore","devTools","reducer","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","Providers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3aff65f2.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\nexport const toggleTheme = createAction<void>(\"user/toggleTheme\");\n","import { useThemeManager } from \"../state/user/hooks\";\r\n\r\nconst useTheme = () => {\r\n  const [isDark, toggleTheme] = useThemeManager();\r\n  return { isDark, toggleTheme };\r\n};\r\n\r\nexport default useTheme;\r\n","import { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, AppState } from \"../../index\";\r\nimport { toggleTheme as toggleThemeAction } from \"../actions\";\r\n\r\nexport function useThemeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const isDark = useSelector<AppState, AppState[\"user\"][\"isDark\"]>(\r\n    (state) => state.user.isDark\r\n  );\r\n\r\n  const toggleTheme = useCallback(() => {\r\n    dispatch(toggleThemeAction());\r\n  }, [dispatch]);\r\n\r\n  return [isDark, toggleTheme];\r\n}\r\n","import classNames from \"classnames\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div\r\n      className={classNames({\r\n        \"bg-blue-900\": true,\r\n      })}\r\n    >\r\n      <div\r\n        className={classNames({\r\n          \"container mx-auto px-4 py-4 text-gray-100\": true,\r\n        })}\r\n      >\r\n        Copyright 2021 Cambrian Protocal. Allright reserved\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import Onboard from \"bnc-onboard\";\r\nimport { API, Wallet } from \"bnc-onboard/dist/src/interfaces\";\r\nimport React, { Component, createContext, useContext } from \"react\";\r\nimport { BLOCK_NATIVE_API_KEY } from \"../config/constants/blocknative\";\r\n\r\nexport type OnBoardContextType = {\r\n  onboard: API;\r\n  address: string;\r\n  balance: string;\r\n  network: number;\r\n  wallet: Wallet;\r\n  setup: () => Promise<void>;\r\n};\r\n\r\nexport const OnboardContext = createContext<OnBoardContextType>(\r\n  {} as OnBoardContextType\r\n);\r\n\r\nexport function useOnboardContext() {\r\n  return useContext(OnboardContext);\r\n}\r\n\r\nconst walletChecks = [{ checkName: \"connect\" }, { checkName: \"network\" }];\r\n\r\n// const wallets = [{ walletName: \"metamask\", preferred: true }];\r\n\r\nclass OnboardProvider extends Component {\r\n  state = {\r\n    onboard: {} as API,\r\n    address: \"\",\r\n    balance: \"\",\r\n    network: 0,\r\n    wallet: {} as Wallet,\r\n    appNetworkId: 0,\r\n    setup: () => {},\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    const initialisation = {\r\n      dappId: BLOCK_NATIVE_API_KEY,\r\n      networkId: 1,\r\n      walletCheck: walletChecks,\r\n      walletSelect: {\r\n        heading: \"Select a wallet\",\r\n        // wallets,\r\n      },\r\n      subscriptions: {\r\n        address: (address: string) => {\r\n          this.setState({ address });\r\n        },\r\n        balance: (balance: string) => {\r\n          this.setState({ balance });\r\n        },\r\n        network: (network: number) => {\r\n          this.setState({ network });\r\n        },\r\n        wallet: (wallet: any) => {\r\n          this.setState({ wallet });\r\n        },\r\n      },\r\n    };\r\n\r\n    const onboard = Onboard(initialisation);\r\n\r\n    this.state = {\r\n      ...this.state,\r\n      onboard,\r\n    };\r\n  }\r\n\r\n  setup = async () => {\r\n    const { onboard } = this.state;\r\n    try {\r\n      const selected = await onboard.walletSelect();\r\n      if (selected) {\r\n        const ready = await onboard.walletCheck();\r\n        if (ready) {\r\n          const walletState = onboard.getState();\r\n          this.setState({ ...walletState });\r\n        } else {\r\n        }\r\n      } else {\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error onboarding\", error);\r\n    }\r\n  };\r\n\r\n  setConfig = (config: any) => this.state.onboard.config(config);\r\n\r\n  render() {\r\n    return (\r\n      <OnboardContext.Provider value={{ ...this.state, setup: this.setup }}>\r\n        {this.props.children}\r\n      </OnboardContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const useOnboard = () => {\r\n  const { onboard } = useOnboardContext();\r\n  return onboard;\r\n};\r\n\r\nexport const useGetState = () => {\r\n  const { onboard } = useOnboardContext();\r\n  return onboard.getState();\r\n};\r\n\r\nexport const useAddress = () => {\r\n  const { address } = useOnboardContext();\r\n  return address;\r\n};\r\n\r\nexport const useWalletBalance = () => {\r\n  const { balance } = useOnboardContext();\r\n  return balance;\r\n};\r\n\r\nexport const useWallet = () => {\r\n  const { wallet } = useOnboardContext();\r\n  return wallet;\r\n};\r\n\r\nexport const useNetwork = () => {\r\n  const { network } = useOnboardContext();\r\n  return network;\r\n};\r\n\r\nexport const useSetup = () => {\r\n  const { setup } = useOnboardContext();\r\n  return setup;\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const useWalletProvider = () => {\r\n  const { provider } = useWallet() || ({} as Wallet);\r\n  return provider;\r\n};\r\n\r\nexport const useSigner = () => {\r\n  const provider = useWalletProvider();\r\n  const network = useNetwork();\r\n  if (network && provider) {\r\n    const signer = new provider.getSigner();\r\n    return signer;\r\n  }\r\n  return {};\r\n};\r\n\r\nexport default OnboardProvider;\r\n","export const BLOCK_NATIVE_API_KEY = process.env.REACT_APP_BLOCK_NATIVE_API_KEY;\r\n","import { MoonIcon, SunIcon } from \"@heroicons/react/outline\";\r\nimport classNames from \"classnames\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useOnboardContext } from \"../../context/OnboardContext\";\r\nimport useTheme from \"../../hooks/useTheme\";\r\n\r\nconst Header = () => {\r\n  const { isDark, toggleTheme } = useTheme();\r\n  const { setup, onboard } = useOnboardContext();\r\n\r\n  const handleConnectWallet = async () => {\r\n    onboard.config({ darkMode: isDark });\r\n    setup();\r\n  };\r\n  return (\r\n    <div\r\n      className={classNames({\r\n        \"border-b border-gray-400 dark:border-gray-800\": true,\r\n      })}\r\n    >\r\n      <div\r\n        className={classNames({\r\n          \"container mx-auto px-4 py-2 flex justify-between items-center text-gray-100 dark:text-gray-900\":\r\n            true,\r\n        })}\r\n      >\r\n        <div\r\n          className={classNames({\r\n            \"font-bold text-xl text-blue-500 uppercase\": true,\r\n          })}\r\n        >\r\n          <NavLink to=\"/\">Cambrian</NavLink>\r\n        </div>\r\n        <div className={classNames({ \"flex \": true })}>\r\n          <button\r\n            onClick={handleConnectWallet}\r\n            className={classNames({\r\n              \"h-10 border-2 px-4 rounded-full mr-2\": true,\r\n              \"border-gray-400 hover:border-gray-100 text-gray-100\": isDark,\r\n              \"border-gray-600 hover:border-gray-900 text-gray-900\": !isDark,\r\n            })}\r\n          >\r\n            Connect Wallet\r\n          </button>\r\n          <button\r\n            onClick={toggleTheme}\r\n            className={classNames({\r\n              \"w-10 h-10 border-2 rounded-full\": true,\r\n              \"border-gray-400 hover:border-gray-100 text-gray-100\": isDark,\r\n              \"border-gray-600 hover:border-gray-900 text-gray-900\": !isDark,\r\n            })}\r\n          >\r\n            {isDark ? (\r\n              <SunIcon className=\"w-6 h-6 mx-auto\" />\r\n            ) : (\r\n              <MoonIcon className=\"text-dark  w-6 h-6 mx-auto\" />\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import classnames from \"classnames\";\r\nimport Footer from \"./Footer\";\r\nimport Header from \"./Header\";\r\n\r\nexport interface MainLayoutProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst MainLayout = ({ children }: MainLayoutProps): React.ReactElement => {\r\n  return (\r\n    <div\r\n      className={classnames({\r\n        \"main-layout text-gray-800 dark:text-gray-100\": true,\r\n      })}\r\n    >\r\n      <Header />\r\n      {children}\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","export default __webpack_public_path__ + \"static/media/ephochs.83249bdc.png\";","import classNames from \"classnames\";\r\nimport imgEphochs from \"../../assets/img/ephochs.png\";\r\n\r\nconst Ephochs = () => {\r\n  return (\r\n    <div className={classNames({ \"container mx-auto px-4 pt-4 pb-8\": true })}>\r\n      <div\r\n        className={classNames({\r\n          \"font-bold text-center text-blue-500 uppercase\": true,\r\n        })}\r\n      >\r\n        EPHOCHS\r\n      </div>\r\n      <div\r\n        className={classNames({\r\n          \"mt-2 font-bold text-center text-3xl dark:text-blue-400 text-blue-900 capitalize\":\r\n            true,\r\n        })}\r\n      >\r\n        Cambrian Timeline\r\n      </div>\r\n      <div\r\n        className={classNames({\r\n          \"max-w-screen-md mx-auto mt-4 text-center text-base md:text-xl capitalize\":\r\n            true,\r\n        })}\r\n      >\r\n        Cambrian Protocol is taking the first steps to unlocking the potential\r\n        of digital organizations, building the future of work, and exiting to\r\n        the community.\r\n      </div>\r\n      <img src={imgEphochs} alt=\"Ephochs\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ephochs;\r\n","import classNames from \"classnames\";\r\n\r\nconst FutureWork = () => {\r\n  return (\r\n    <div className={classNames({ \"container mx-auto px-4 pt-4 pb-8\": true })}>\r\n      <div\r\n        className={classNames({\r\n          \"font-bold text-center text-blue-500 uppercase\": true,\r\n        })}\r\n      >\r\n        THE FUTURE OF WORK\r\n      </div>\r\n      <div\r\n        className={classNames({\r\n          \"mt-2 font-bold text-center text-3xl dark:text-blue-400 text-blue-900 capitalize\":\r\n            true,\r\n        })}\r\n      >\r\n        Human Capital: On-Chained\r\n      </div>\r\n      <div\r\n        className={classNames({\r\n          \"max-w-screen-md mx-auto mt-4 text-center text-base md:text-xl capitalize\":\r\n            true,\r\n        })}\r\n      >\r\n        <p>Enter conditional resource allocation.</p>\r\n        <p>\r\n          By tying the value of conditional tokens to governance mechanisms,\r\n          organizations can provide funding to individuals and teams that stays\r\n          accountable to the community.\r\n        </p>\r\n        <p>\r\n          This crucial unlock allows any digital organization, whether DAO or\r\n          protocol, to act off-chain beyond the scope of its programming, but\r\n          within the oversight of its governance.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FutureWork;\r\n","import classNames from \"classnames\";\r\nimport Ephochs from \"./Epochs\";\r\nimport FutureWork from \"./FutureWork\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div\r\n      className={classNames({\r\n        \"text-gray-800 dark:text-gray-100\": true,\r\n      })}\r\n    >\r\n      <FutureWork />\r\n      <Ephochs />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport MainLayout from \"../layouts/MainLayout\";\r\nimport Home from \"./Home\";\r\n\r\nconst Pages = () => {\r\n  return (\r\n    <MainLayout>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/cambrian-frontend\" component={Home} />\r\n      </Switch>\r\n    </MainLayout>\r\n  );\r\n};\r\n\r\nexport default Pages;\r\n","import classNames from \"classnames\";\nimport { Helmet } from \"react-helmet\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport useTheme from \"./hooks/useTheme\";\nimport Views from \"./views\";\n\nconst App = () => {\n  const { isDark } = useTheme();\n  return (\n    <>\n      <Helmet>\n        <body className={classNames({ dark: isDark, 'bg-gray-900': isDark })} />\n      </Helmet>\n      <div className=\"App mx-0\">\n        <Router>\n          <Switch>\n            <Route component={Views} />\n          </Switch>\n        </Router>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n\nexport default updateVersion\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { toggleTheme } from \"./actions\";\n\nconst currentTimestamp = () => new Date().getTime();\n\nexport interface UserState {\n  timestamp: number;\n  isDark: boolean;\n}\n\nexport const initialState: UserState = {\n  timestamp: currentTimestamp(),\n  isDark: false,\n};\n\nexport default createReducer(initialState, (builder) =>\n  builder.addCase(toggleTheme, (state) => {\n    state.isDark = !state.isDark;\n  })\n);\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { load, save } from \"redux-localstorage-simple\";\r\nimport updateVersion from \"./global/actions\";\r\nimport user from \"./user/reducer\";\r\nconst PERSISTED_KEYS: string[] = [\"user\"];\r\n\r\nconst store = configureStore({\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n  reducer: {\r\n    user,\r\n  },\r\n  middleware: [\r\n    ...getDefaultMiddleware({ thunk: true }),\r\n    save({ states: PERSISTED_KEYS }),\r\n  ],\r\n  preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\n\r\nstore.dispatch(updateVersion());\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport const useAppDispatch = () => useDispatch();\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport OnboardProvider from \"./context/OnboardContext\";\nimport store from \"./state\";\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <Provider store={store}>\n      <OnboardProvider>{children}</OnboardProvider>\n    </Provider>\n  );\n};\n\nexport default Providers;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport Providers from \"./Providers\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}